<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background offset
regularOffset = view_hview[0]-background_height[1];
offset = regularOffset - 48;
background_y[1] = offset;
background_y[2] = offset;
background_y[3] = offset;
background_y[4] = regularOffset;

screenShakeX = 0;
screenShakeY = 0;

time = 0;
/*
background_index[0] = bg_mountain_range;
background_index[1] = bg_forest;
background_index[2] = bg_middle;
background_index[3] = bg_snow;
background_index[4] = bg_snowfall;
background_index[5] = bg_snowfall;
background_index[6] = bg_sun_moon;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reduce screenshake
if(screenShakeX &gt; 0.2) {
    screenShakeX *= 0.7;
    alarm[0] = room_speed*0.2;
} else {
    screenShakeX = 0;
}

if(screenShakeY &gt; 0.2) {
    screenShakeY *= 0.7;
    alarm[0] = room_speed*0.2;
} else {
    screenShakeY = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parallax &amp; view follow
time = sin(pi+obj_human.x*0.01); //-1 to 1


//Sun
background_x[0] = view_xview[0]+view_wview[0]/2-background_width[0]/2+cos(pi+obj_human.x*0.01)*128;
background_y[0] = view_hview[0]/2+view_yview[0]*0.5+time*64;
//Mountains
background_x[1] = view_xview[0]*0.95;
background_y[1] = offset+view_yview[0]*0.55;
//...etc
background_x[2] = view_xview[0]*0.8;
background_y[2] = offset+view_yview[0]*0.45;

background_x[3] = view_xview[0]*0.7;
background_y[3] = offset+view_yview[0]*0.4;

background_x[5] = view_xview[0]*0.1+sin(current_time*0.001)*14;
background_y[5] += 0.3;

background_x[6] = -view_xview[0]*0.5+sin(0.4+current_time*0.001)*15;
background_y[6] += 0.5+sin(current_time*0.0005)*0.1;
/*
screenShakeX = mouse_x * 0.1;
screenShakeY = mouse_y * 0.1;
*/
/*if(view_visible[1]){
    view_xview[0] = (obj_human.x+obj_human.aimX)/2 - view_wview[0]/3 + random_range(-screenShakeX,screenShakeX);
    view_yview[0] = obj_human.y - view_hview[0]/1.05 + random_range(-screenShakeY,screenShakeY);
} else {*/
    //var dir = point_direction(obj_human.x,obj_human.y,obj_human.aimX,obj_human.aimY);
    //var recoil = -20;
    if(obj_human.x &gt; view_xview[0]+view_wview[0]/5){
        view_xview[0] += (obj_human.x - view_xview[0]-view_wview[0]/5)*0.1 + random_range(-screenShakeX,screenShakeX);
        //view_xview[0] = obj_human.x - view_wview[0]/3 + random_range(-screenShakeX,screenShakeX); //+ lengthdir_x(recoil,dir);
    } else {
        
    }
    
    view_yview[0] = obj_human.y - view_hview[0]/1.05 + random_range(-screenShakeY,screenShakeY);//+ lengthdir_y(recoil,dir);;
//}

view_xport[1] = obj_human.aimX - view_xview[0] - view_wport[1]/2;
view_yport[1] = obj_human.aimY - view_yview[0] - view_hport[1]/2;

view_xview[1] = view_xport[1]+view_xview[0] + view_wview[1]/2;
view_yview[1] = view_yport[1]+view_yview[0] + view_hview[1]/2;

//view_angle[0] = gamepad_button_value(0, gp_shoulderrb)*30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw crosshair
if(view_visible[1])
    draw_sprite(spr_crosshair,0,view_xview[1]+ view_wview[1]/2, view_yview[1]+ view_hview[1]/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
